!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/james/Workspace/dotfiles/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20230219.0/
0	nvim/lua/james/core/my_snippets/package.json	/^            "systemverilog"$/;"	s	array:contributes.snippets.0.language
0	nvim/lua/james/core/my_snippets/package.json	/^        {$/;"	o	array:contributes.snippets
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"$$display(\\"${1}\\"$2);$0"$/;"	s	array:display.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"${1:mod_name} ${2:instance_name} (${3:.*}$0);"$/;"	s	array:set Module.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"`def $1 = $2"$/;"	s	array:define.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"`include \\"$1\\""$/;"	s	array:include.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"`timescale ${1:1ps}\/${2:1ps}$0"$/;"	s	array:timescale.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"assert (${1:condition}) ${2}",$/;"	s	array:assert.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"begin",$/;"	s	array:beginend block.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"case(${1:param})",$/;"	s	array:case.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"class ${1:className} extends ${2:superClass};",$/;"	s	array:class extends.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"class ${1:className};",$/;"	s	array:class.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"enum ${1:data_type} { $0 } ${2:name}"$/;"	s	array:enum.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"for ($1 = $2; $3; $4) begin",$/;"	s	array:for loop.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"forever begin",$/;"	s	array:forever.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"fork",$/;"	s	array:fork-join.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"function $1;",$/;"	s	array:function.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"if ( ${1:conditions} ) begin",$/;"	s	array:ifelse.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"initial begin",$/;"	s	array:initial.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"interface ${1:interfacename};",$/;"	s	array:interface.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"mailbox mbx",$/;"	s	array:mailbox.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"parameter $1 = $2;"$/;"	s	array:parameter.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"task ${1:automatic} ${2:taskName}(${3:arguments});",$/;"	s	array:task.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"typedef enum ${1:data_type} { $0 } ${2:name};"$/;"	s	array:typedef enum.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"typedef struct packed {",$/;"	s	array:typedef struct packed.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"while ($1) begin",$/;"	s	array:while loop.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "always_comb begin : ${1:blockName}",$/;"	s	array:always_comb block.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "always_ff @(posedge ${1:clock} ) begin : ${2:blockName}",$/;"	s	array:always_ff block.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "if (${1:conditions}) begin",$/;"	s	array:if block.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "module ${moduleName} #(",$/;"	s	array:module with parameters.body
0	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "module ${moduleName} (",$/;"	s	array:module without parameters.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"  $2;",$/;"	s	array:function.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"${1:mbx = new();}"$/;"	s	array:mailbox.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t",$/;"	s	array:case.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$0",$/;"	s	array:beginend block.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$0",$/;"	s	array:for loop.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$0",$/;"	s	array:forever.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$0",$/;"	s	array:fork-join.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$0",$/;"	s	array:initial.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$0",$/;"	s	array:interface.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$0",$/;"	s	array:task.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$0",$/;"	s	array:typedef struct packed.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$2",$/;"	s	array:ifelse.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$2",$/;"	s	array:while loop.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\tfunction new();",$/;"	s	array:class extends.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\tfunction new();",$/;"	s	array:class.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"else   ${3:error_process}"$/;"	s	array:assert.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "\\t$0",$/;"	s	array:always_comb block.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "\\t$0",$/;"	s	array:always_ff block.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "\\t$0",$/;"	s	array:if block.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "\\t${1:parameters}",$/;"	s	array:module with parameters.body
1	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "\\t${ports}",$/;"	s	array:module without parameters.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"  $3",$/;"	s	array:function.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t\\t$0",$/;"	s	array:class extends.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t\\t$0",$/;"	s	array:class.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\tdefault:$0",$/;"	s	array:case.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"end else begin",$/;"	s	array:ifelse.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"end"$/;"	s	array:beginend block.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"end"$/;"	s	array:for loop.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"end"$/;"	s	array:forever.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"end"$/;"	s	array:initial.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"end"$/;"	s	array:while loop.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"endinterface \/\/${1}"$/;"	s	array:interface.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"endtask \/\/${1}"$/;"	s	array:task.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"join"$/;"	s	array:fork-join.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"} ${1:struct_name};"$/;"	s	array:typedef struct packed.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            ") (",$/;"	s	array:module with parameters.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            ");",$/;"	s	array:module without parameters.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "end"$/;"	s	array:always_comb block.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "end"$/;"	s	array:always_ff block.body
2	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "end"$/;"	s	array:if block.body
3	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\t$3",$/;"	s	array:ifelse.body
3	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\tendfunction \/\/new()",$/;"	s	array:class extends.body
3	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"\\tendfunction \/\/new()",$/;"	s	array:class.body
3	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"endcase"$/;"	s	array:case.body
3	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"endfunction"$/;"	s	array:function.body
3	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "\\t$0",$/;"	s	array:module without parameters.body
3	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "\\t${2:ports}",$/;"	s	array:module with parameters.body
4	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"endclass \/\/${1} extends ${2}"$/;"	s	array:class extends.body
4	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^			"endclass \/\/${1}"$/;"	s	array:class.body
4	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            ");",$/;"	s	array:module with parameters.body
4	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "end"$/;"	s	array:ifelse.body
4	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "endmodule"$/;"	s	array:module without parameters.body
5	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "\\t$0",$/;"	s	array:module with parameters.body
6	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^            "endmodule"$/;"	s	array:module with parameters.body
About The Project	nvim/README.md	/^## About The Project$/;"	s
Acknowledgments	nvim/README.md	/^## Acknowledgments$/;"	s
Associative array	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"Associative array":{$/;"	o
Configuration and Usage	nvim/README.md	/^## Configuration and Usage$/;"	s
Contact	nvim/README.md	/^## Contact$/;"	s
Features	nvim/README.md	/^### Features$/;"	S	section:About The Project
Installation	nvim/README.md	/^## Installation$/;"	s
Roadmap	nvim/README.md	/^## Roadmap$/;"	s
["<C-w>"]	nvim/lua/james/plugins/dontuse_telescope.lua	/^          ["<C-w>"] = function()$/;"	f
['<C-b>']	nvim/lua/james/plugins/cmp.lua	/^    ['<C-b>'] = cmp.mapping(function(fallback)$/;"	f
['<C-d>']	nvim/lua/james/plugins/cmp.lua	/^    ['<C-d>'] = cmp.mapping(function(fallback)$/;"	f
['<S-Tab>']	nvim/lua/james/plugins/cmp.lua	/^    ['<S-Tab>'] = cmp.mapping(function(fallback)$/;"	f
['<Tab>']	nvim/lua/james/plugins/cmp.lua	/^    ['<Tab>'] = cmp.mapping(function(fallback)$/;"	f
_assign	nvim/lua/james/core/utils/modules.lua	/^local function _assign(old, new, k)$/;"	f
_replace	nvim/lua/james/core/utils/modules.lua	/^local function _replace(old, new, repeat_tbl)$/;"	f
after_mount	nvim/lua/james/plugins/fine-cmdline.lua	/^      after_mount = function(input)$/;"	f
always_comb block	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^    "always_comb block": {$/;"	o
always_ff block	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^    "always_ff block": {$/;"	o
array	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"array":{$/;"	o
assert	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"assert":{$/;"	o
before_mount	nvim/lua/james/plugins/fine-cmdline.lua	/^      before_mount = function(input)$/;"	f
beginend block	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"beginend block": {$/;"	o
bit	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"bit":{$/;"	o
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": "this"$/;"	s	object:this
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:assert
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:beginend block
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:define
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:for loop
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:forever
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:fork-join
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:function
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:ifelse
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:include
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:initial
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:parameter
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body": [$/;"	a	object:while loop
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":"${1:data_type} ${2:name}[${3:index_type}];$0",$/;"	s	object:Associative array
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":"${1:data_type} ${2:queue_name}[$];",$/;"	s	object:queue
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":"[${1:8}:${2:0}]$0",$/;"	s	object:array
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":"bit"$/;"	s	object:bit
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":"byte"$/;"	s	object:byte
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":"int"$/;"	s	object:int
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":"logic"$/;"	s	object:logic
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":"packed"$/;"	s	object:packed
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:case
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:class
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:class extends
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:display
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:enum
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:interface
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:mailbox
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:set Module
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:task
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:timescale
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:typedef enum
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"body":[$/;"	a	object:typedef struct packed
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "body": [$/;"	a	object:always_comb block
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "body": [$/;"	a	object:always_ff block
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "body": [$/;"	a	object:if block
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "body": [$/;"	a	object:module with parameters
body	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "body": [$/;"	a	object:module without parameters
byte	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"byte":{$/;"	o
case	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"case":{$/;"	o
class	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"class":{$/;"	o
class extends	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"class extends":{$/;"	o
config	nvim/lua/james/plugins/telescope.lua	/^      config = function()$/;"	f
contributes	nvim/lua/james/core/my_snippets/package.json	/^    "contributes": {$/;"	o
define	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^    "define": {$/;"	o
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "`define var = val"$/;"	s	object:define
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "`include \\"..\\""$/;"	s	object:include
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "for (...) begin ... end"$/;"	s	object:for loop
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "forever begin ... end"$/;"	s	object:forever
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "fork ... join"$/;"	s	object:fork-join
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "function (...) ... endfunction"$/;"	s	object:function
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "if (...) begin ... end else begin ... end"$/;"	s	object:ifelse
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "insert assert() ... else ..."$/;"	s	object:assert
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "paramter var = val;"$/;"	s	object:parameter
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description": "while (...) begin ... end"$/;"	s	object:while loop
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"$display(\\"...\\", params...)"$/;"	s	object:display
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"case() ... endcase"$/;"	s	object:case
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"class name extends super; ... endclass"$/;"	s	object:class extends
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"class name; ... endclass"$/;"	s	object:class
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"enum (data_type) { ... } name"$/;"	s	object:enum
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"insert Associative array(AA)."$/;"	s	object:Associative array
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"insert [x:y]"$/;"	s	object:array
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"insert mailbox instance"$/;"	s	object:mailbox
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"insert queue."$/;"	s	object:queue
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"interface name; ... endinterface"$/;"	s	object:interface
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"set module, mod i0 (.*);"$/;"	s	object:set Module
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"task name; ... endtask"$/;"	s	object:task
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"typedef enum (data_type) { ... } name"$/;"	s	object:typedef enum
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"description":"typedef struct packed { ... } name"$/;"	s	object:typedef struct packed
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "description": "Insert a if block"$/;"	s	object:if block
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "description": "Insert a module with parameter"$/;"	s	object:module with parameters
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "description": "Insert a module without parameter"$/;"	s	object:module without parameters
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "description": "Insert an always_comb block"$/;"	s	object:always_comb block
description	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "description": "Insert an always_ff block"$/;"	s	object:always_ff block
diagnostics_indicator	nvim/lua/james/plugins/bufferline.lua	/^        diagnostics_indicator = function(count, level)$/;"	f
display	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"display":{$/;"	o
ensure_packer	nvim/init.lua	/^local ensure_packer = function()$/;"	f
ensure_packer	nvim/lua/james/plugins-setup.lua	/^local ensure_packer = function()$/;"	f
enum	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"enum":{$/;"	o
error_msg	nvim/plugin/packer_compiled.lua	/^local no_errors, error_msg = pcall(function()$/;"	f
expand	nvim/lua/james/plugins/cmp.lua	/^    expand = function(args)$/;"	f
f	nvim/lua/james/plugins/luasnip.lua	/^local f = ls.function_node$/;"	f
footer	nvim/lua/james/plugins/alpha/init.lua	/^local function footer()$/;"	f
for loop	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^    "for loop": {$/;"	o
forever	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"forever":{$/;"	o
fork-join	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"fork-join":{$/;"	o
format	nvim/lua/james/plugins/cmp.lua	/^    format = function(entry, item)$/;"	f
function	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"function": {$/;"	o
if block	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^    "if block": {$/;"	o
ifelse	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"ifelse": {$/;"	o
include	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^    "include": {$/;"	o
initial	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"initial": {$/;"	o
int	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"int":{$/;"	o
interface	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"interface":{$/;"	o
language	nvim/lua/james/core/my_snippets/package.json	/^          "language": [$/;"	a	object:contributes.snippets.0
logic	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"logic":{$/;"	o
mailbox	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"mailbox":{$/;"	o
module with parameters	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^    "module with parameters": {$/;"	o
module without parameters	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^    "module without parameters": {$/;"	o
name	nvim/lua/james/core/my_snippets/package.json	/^    "name": "my_snippets",$/;"	s
on_attach	nvim/lua/james/plugins/lspconfig.lua	/^local on_attach = function(client, bufnr)$/;"	f
on_colors	nvim/lua/james/core/themes/tokyonight-night.lua	/^    on_colors = function(colors)$/;"	f
on_colors	nvim/lua/james/core/themes/tokyonight.lua	/^    on_colors = function(colors)$/;"	f
packed	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"packed":{$/;"	o
parameter	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"parameter": {$/;"	o
path	nvim/lua/james/core/my_snippets/package.json	/^          "path": ".\/snippets\/systemverilog.json"$/;"	s	object:contributes.snippets.0
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "assert",$/;"	s	object:assert
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "begin",$/;"	s	object:beginend block
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "def",$/;"	s	object:define
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "for",$/;"	s	object:for loop
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "forever",$/;"	s	object:forever
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "forkjoin",$/;"	s	object:fork-join
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "function",$/;"	s	object:function
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "ifelse",$/;"	s	object:ifelse
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "inc",$/;"	s	object:include
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "initial",$/;"	s	object:initial
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "parameter",$/;"	s	object:parameter
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "this",$/;"	s	object:this
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix": "while",$/;"	s	object:while loop
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"AA",$/;"	s	object:Associative array
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"array",$/;"	s	object:array
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"bit",$/;"	s	object:bit
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"byte",$/;"	s	object:byte
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"case",$/;"	s	object:case
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"class",$/;"	s	object:class
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"classextends",$/;"	s	object:class extends
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"display",$/;"	s	object:display
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"enum",$/;"	s	object:enum
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"int",$/;"	s	object:int
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"interface",$/;"	s	object:interface
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"logic",$/;"	s	object:logic
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"mailbox",$/;"	s	object:mailbox
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"packed",$/;"	s	object:packed
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"queue",$/;"	s	object:queue
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"setmodule",$/;"	s	object:set Module
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"task",$/;"	s	object:task
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"ts",$/;"	s	object:timescale
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"typedefenum",$/;"	s	object:typedef enum
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^		"prefix":"typedefstructpacked",$/;"	s	object:typedef struct packed
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "prefix": "always_comb",$/;"	s	object:always_comb block
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "prefix": "always_ff",$/;"	s	object:always_ff block
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "prefix": "if",$/;"	s	object:if block
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "prefix": "mod",$/;"	s	object:module without parameters
prefix	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^        "prefix": "paramod",$/;"	s	object:module with parameters
preview_width	nvim/lua/james/plugins/dontuse_telescope.lua	/^          preview_width = function(_, cols, _)$/;"	f
queue	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"queue":{$/;"	o
reload	nvim/lua/james/core/utils/modules.lua	/^M.reload = function(mod)$/;"	f	unknown:M
require_clean	nvim/lua/james/core/utils/modules.lua	/^M.require_clean = function(m)$/;"	f	unknown:M
require_safe	nvim/lua/james/core/utils/modules.lua	/^M.require_safe = function(mod)$/;"	f	unknown:M
root_dir	nvim/lua/james/plugins/lspconfig.lua	/^    root_dir = function() return vim.loop.cwd() end$/;"	f
run	nvim/lua/james/plugins-setup.lua	/^use({ "iamcco\/markdown-preview.nvim", run = "cd app && npm install", setup = function() vim.g.m/;"	f
save_profiles	nvim/plugin/packer_compiled.lua	/^local function save_profiles(threshold)$/;"	f
set Module	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"set Module":{$/;"	o
set_keymaps	nvim/lua/james/plugins/fine-cmdline.lua	/^      set_keymaps = function(imap, feedkeys)$/;"	f
set_prompt_to_entry_value	nvim/lua/james/plugins/dontuse_telescope.lua	/^  local set_prompt_to_entry_value = function(prompt_bufnr)$/;"	f
snippets	nvim/lua/james/core/my_snippets/package.json	/^      "snippets": [$/;"	a	object:contributes
task	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"task":{$/;"	o
this	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"this":{$/;"	o
time	nvim/plugin/packer_compiled.lua	/^  time = function(chunk, start) end$/;"	f
time	nvim/plugin/packer_compiled.lua	/^  time = function(chunk, start)$/;"	f
timescale	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"timescale":{$/;"	o
try_loadstring	nvim/plugin/packer_compiled.lua	/^local function try_loadstring(s, component, name)$/;"	f
typedef enum	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"typedef enum":{$/;"	o
typedef struct packed	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"typedef struct packed":{$/;"	o
while loop	nvim/lua/james/core/my_snippets/snippets/systemverilog.json	/^	"while loop": {$/;"	o
✨ Features	nvim/README.md	/^## ✨ Features$/;"	s
👐 Contributing	nvim/README.md	/^## 👐 Contributing$/;"	s
📜 License	nvim/README.md	/^## 📜 License$/;"	s
